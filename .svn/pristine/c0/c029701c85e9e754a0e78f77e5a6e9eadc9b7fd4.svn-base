package pers.guanzf.common.core.service.impl;

import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

import pers.guanzf.common.core.dao.FriendMapper;
import pers.guanzf.common.core.dao.ProduceMapper;
import pers.guanzf.common.core.model.FriendExample;
import pers.guanzf.common.core.model.ProduceExample;
import pers.guanzf.common.core.model.info.FriendInfo;
import pers.guanzf.common.core.model.info.PersonInfo;
import pers.guanzf.common.core.model.info.ProduceInfo;
import pers.guanzf.common.core.service.ProduceService;
import pers.guanzf.common.util.StringUtil;
import pers.guanzf.common.util.UUIDUtil;

@Service
public class ProduceServiceImpl implements ProduceService {

	private static final Logger LOGGER = Logger.getLogger(ProduceServiceImpl.class);
	
	@Autowired
	private ProduceMapper produceMapper;
	
	@Autowired
	private FriendMapper friendMapper;
	
	@Override
	public List<ProduceInfo> listProduce() {
		ProduceExample example = new ProduceExample();
		return produceMapper.selectByExample(example);
	}

	@Override
	public ProduceInfo getProduceInfo(String produceId) {
		if (StringUtils.isEmpty(produceId)) {
			LOGGER.info("ID为空");
			return null;
		}
		ProduceExample example = new ProduceExample();
		ProduceExample.Criteria criteria = example.createCriteria();
		criteria.andProduceIdEqualTo(produceId);
		List<ProduceInfo> produces = produceMapper.selectByExample(example);
		if (CollectionUtils.isEmpty(produces)) {
			LOGGER.info("ID没有对应的信息");
			return null;
		}
		return produces.get(0);
	}

	@Override
	public int deleteProduceInfo(String produceId) {
		if (StringUtils.isEmpty(produceId)) {
			LOGGER.info("ID为空");
			return -1;
		}
		ProduceExample example = new ProduceExample();
		ProduceExample.Criteria criteria = example.createCriteria();
		criteria.andProduceIdEqualTo(produceId);
		int result = produceMapper.deleteByExample(example);
		if (result != 1) {
			LOGGER.info("删除商品信息有误");
		}
		return result;
	}

	@Override
	public int insertProduceInfo(ProduceInfo produce) {
		produce.setProduceId(UUIDUtil.randomID());
		int result = produceMapper.insertSelective(produce);
		if (result != 1) {
			LOGGER.info("数据插入失败");
			return 0;
		}
		return 1;
	}

	@Override
	public int updateProduceInfo(ProduceInfo produce) {
		ProduceExample example = new ProduceExample();
		ProduceExample.Criteria criteria = example.createCriteria();
		criteria.andProduceIdEqualTo(produce.getProduceId());
		int result = produceMapper.updateByExampleSelective(produce, example);
		if (result != 1) {
			LOGGER.info("更新数据失败");
			return 0;
		}
		return 1;
	}
	
	public List<ProduceInfo> listMostBestProduce() {
		return null;
	}

	@Override
	public List<ProduceInfo> listFriendRecommendData(String userId, String num) {
		if (StringUtil.isEmpty(userId)) {
			
		}
		/* 查询好用ID */
		FriendExample example = new FriendExample();
		example.setOrderByClause("FRIEND_SIMILARITY_DEGREE DESC limit 4");
		FriendExample.Criteria criteria = example.createCriteria();
		criteria.andFriendIdEqualTo(userId);
		List<FriendInfo> friendInfos = friendMapper.selectByExample(example);
		for (FriendInfo friendInfo : friendInfos) {
			
		}
		return null;
	}

}
